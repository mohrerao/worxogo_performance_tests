/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
    $(".portlet-header").css("cursor", "auto");
});

var showControllersOnly = false;
var seriesFilter = "";
var filtersOnlySampleSeries = true;

// Fixes time stamps
function fixTimeStamps(series, offset){
    $.each(series, function(index, item) {
        $.each(item.data, function(index, coord) {
            coord[0] += offset;
        });
    });
}

// Check if the specified jquery object is a graph
function isGraph(object){
    return object.data('plot') !== undefined;
}

/**
 * Export graph to a PNG
 */
function exportToPNG(graphName, target) {
    var plot = $("#"+graphName).data('plot');
    var flotCanvas = plot.getCanvas();
    var image = flotCanvas.toDataURL();
    image = image.replace("image/png", "image/octet-stream");
    
    var downloadAttrSupported = ("download" in document.createElement("a"));
    if(downloadAttrSupported === true) {
        target.download = graphName + ".png";
        target.href = image;
    }
    else {
        document.location.href = image;
    }
    
}

// Override the specified graph options to fit the requirements of an overview
function prepareOverviewOptions(graphOptions){
    var overviewOptions = {
        series: {
            shadowSize: 0,
            lines: {
                lineWidth: 1
            },
            points: {
                // Show points on overview only when linked graph does not show
                // lines
                show: getProperty('series.lines.show', graphOptions) == false,
                radius : 1
            }
        },
        xaxis: {
            ticks: 2,
            axisLabel: null
        },
        yaxis: {
            ticks: 2,
            axisLabel: null
        },
        legend: {
            show: false,
            container: null
        },
        grid: {
            hoverable: false
        },
        tooltip: false
    };
    return $.extend(true, {}, graphOptions, overviewOptions);
}

// Force axes boundaries using graph extra options
function prepareOptions(options, data) {
    options.canvas = true;
    var extraOptions = data.extraOptions;
    if(extraOptions !== undefined){
        var xOffset = options.xaxis.mode === "time" ? 19800000 : 0;
        var yOffset = options.yaxis.mode === "time" ? 19800000 : 0;

        if(!isNaN(extraOptions.minX))
        	options.xaxis.min = parseFloat(extraOptions.minX) + xOffset;
        
        if(!isNaN(extraOptions.maxX))
        	options.xaxis.max = parseFloat(extraOptions.maxX) + xOffset;
        
        if(!isNaN(extraOptions.minY))
        	options.yaxis.min = parseFloat(extraOptions.minY) + yOffset;
        
        if(!isNaN(extraOptions.maxY))
        	options.yaxis.max = parseFloat(extraOptions.maxY) + yOffset;
    }
}

// Filter, mark series and sort data
/**
 * @param data
 * @param noMatchColor if defined and true, series.color are not matched with index
 */
function prepareSeries(data, noMatchColor){
    var result = data.result;

    // Keep only series when needed
    if(seriesFilter && (!filtersOnlySampleSeries || result.supportsControllersDiscrimination)){
        // Insensitive case matching
        var regexp = new RegExp(seriesFilter, 'i');
        result.series = $.grep(result.series, function(series, index){
            return regexp.test(series.label);
        });
    }

    // Keep only controllers series when supported and needed
    if(result.supportsControllersDiscrimination && showControllersOnly){
        result.series = $.grep(result.series, function(series, index){
            return series.isController;
        });
    }

    // Sort data and mark series
    $.each(result.series, function(index, series) {
        series.data.sort(compareByXCoordinate);
        if(!(noMatchColor && noMatchColor===true)) {
	        series.color = index;
	    }
    });
}

// Set the zoom on the specified plot object
function zoomPlot(plot, xmin, xmax, ymin, ymax){
    var axes = plot.getAxes();
    // Override axes min and max options
    $.extend(true, axes, {
        xaxis: {
            options : { min: xmin, max: xmax }
        },
        yaxis: {
            options : { min: ymin, max: ymax }
        }
    });

    // Redraw the plot
    plot.setupGrid();
    plot.draw();
}

// Prepares DOM items to add zoom function on the specified graph
function setGraphZoomable(graphSelector, overviewSelector){
    var graph = $(graphSelector);
    var overview = $(overviewSelector);

    // Ignore mouse down event
    graph.bind("mousedown", function() { return false; });
    overview.bind("mousedown", function() { return false; });

    // Zoom on selection
    graph.bind("plotselected", function (event, ranges) {
        // clamp the zooming to prevent infinite zoom
        if (ranges.xaxis.to - ranges.xaxis.from < 0.00001) {
            ranges.xaxis.to = ranges.xaxis.from + 0.00001;
        }
        if (ranges.yaxis.to - ranges.yaxis.from < 0.00001) {
            ranges.yaxis.to = ranges.yaxis.from + 0.00001;
        }

        // Do the zooming
        var plot = graph.data('plot');
        zoomPlot(plot, ranges.xaxis.from, ranges.xaxis.to, ranges.yaxis.from, ranges.yaxis.to);
        plot.clearSelection();

        // Synchronize overview selection
        overview.data('plot').setSelection(ranges, true);
    });

    // Zoom linked graph on overview selection
    overview.bind("plotselected", function (event, ranges) {
        graph.data('plot').setSelection(ranges);
    });

    // Reset linked graph zoom when reseting overview selection
    overview.bind("plotunselected", function () {
        var overviewAxes = overview.data('plot').getAxes();
        zoomPlot(graph.data('plot'), overviewAxes.xaxis.min, overviewAxes.xaxis.max, overviewAxes.yaxis.min, overviewAxes.yaxis.max);
    });
}

var responseTimePercentilesInfos = {
        data: {"result": {"minY": 889.0, "minX": 0.0, "maxY": 4663.0, "series": [{"data": [[0.0, 954.0], [0.1, 966.0], [0.2, 977.0], [0.3, 977.0], [0.4, 987.0], [0.5, 988.0], [0.6, 993.0], [0.7, 997.0], [0.8, 1001.0], [0.9, 1001.0], [1.0, 1002.0], [1.1, 1004.0], [1.2, 1004.0], [1.3, 1004.0], [1.4, 1004.0], [1.5, 1006.0], [1.6, 1007.0], [1.7, 1007.0], [1.8, 1009.0], [1.9, 1009.0], [2.0, 1017.0], [2.1, 1018.0], [2.2, 1019.0], [2.3, 1019.0], [2.4, 1024.0], [2.5, 1029.0], [2.6, 1030.0], [2.7, 1031.0], [2.8, 1031.0], [2.9, 1034.0], [3.0, 1036.0], [3.1, 1042.0], [3.2, 1042.0], [3.3, 1043.0], [3.4, 1044.0], [3.5, 1044.0], [3.6, 1047.0], [3.7, 1051.0], [3.8, 1051.0], [3.9, 1052.0], [4.0, 1052.0], [4.1, 1056.0], [4.2, 1059.0], [4.3, 1060.0], [4.4, 1064.0], [4.5, 1073.0], [4.6, 1073.0], [4.7, 1073.0], [4.8, 1074.0], [4.9, 1076.0], [5.0, 1076.0], [5.1, 1077.0], [5.2, 1078.0], [5.3, 1078.0], [5.4, 1084.0], [5.5, 1084.0], [5.6, 1084.0], [5.7, 1085.0], [5.8, 1087.0], [5.9, 1088.0], [6.0, 1088.0], [6.1, 1089.0], [6.2, 1090.0], [6.3, 1090.0], [6.4, 1090.0], [6.5, 1091.0], [6.6, 1092.0], [6.7, 1092.0], [6.8, 1092.0], [6.9, 1093.0], [7.0, 1094.0], [7.1, 1096.0], [7.2, 1096.0], [7.3, 1096.0], [7.4, 1098.0], [7.5, 1099.0], [7.6, 1100.0], [7.7, 1103.0], [7.8, 1103.0], [7.9, 1103.0], [8.0, 1103.0], [8.1, 1104.0], [8.2, 1104.0], [8.3, 1104.0], [8.4, 1104.0], [8.5, 1105.0], [8.6, 1106.0], [8.7, 1107.0], [8.8, 1108.0], [8.9, 1109.0], [9.0, 1109.0], [9.1, 1110.0], [9.2, 1111.0], [9.3, 1112.0], [9.4, 1115.0], [9.5, 1115.0], [9.6, 1116.0], [9.7, 1116.0], [9.8, 1116.0], [9.9, 1117.0], [10.0, 1117.0], [10.1, 1119.0], [10.2, 1120.0], [10.3, 1120.0], [10.4, 1121.0], [10.5, 1124.0], [10.6, 1125.0], [10.7, 1125.0], [10.8, 1127.0], [10.9, 1128.0], [11.0, 1129.0], [11.1, 1131.0], [11.2, 1131.0], [11.3, 1133.0], [11.4, 1133.0], [11.5, 1134.0], [11.6, 1136.0], [11.7, 1136.0], [11.8, 1136.0], [11.9, 1137.0], [12.0, 1140.0], [12.1, 1140.0], [12.2, 1143.0], [12.3, 1145.0], [12.4, 1146.0], [12.5, 1147.0], [12.6, 1147.0], [12.7, 1147.0], [12.8, 1148.0], [12.9, 1148.0], [13.0, 1150.0], [13.1, 1151.0], [13.2, 1152.0], [13.3, 1153.0], [13.4, 1153.0], [13.5, 1153.0], [13.6, 1154.0], [13.7, 1155.0], [13.8, 1155.0], [13.9, 1156.0], [14.0, 1156.0], [14.1, 1157.0], [14.2, 1158.0], [14.3, 1159.0], [14.4, 1160.0], [14.5, 1160.0], [14.6, 1161.0], [14.7, 1161.0], [14.8, 1161.0], [14.9, 1161.0], [15.0, 1162.0], [15.1, 1162.0], [15.2, 1163.0], [15.3, 1164.0], [15.4, 1164.0], [15.5, 1164.0], [15.6, 1167.0], [15.7, 1167.0], [15.8, 1168.0], [15.9, 1169.0], [16.0, 1169.0], [16.1, 1169.0], [16.2, 1169.0], [16.3, 1170.0], [16.4, 1171.0], [16.5, 1171.0], [16.6, 1171.0], [16.7, 1172.0], [16.8, 1172.0], [16.9, 1172.0], [17.0, 1172.0], [17.1, 1173.0], [17.2, 1173.0], [17.3, 1174.0], [17.4, 1174.0], [17.5, 1174.0], [17.6, 1174.0], [17.7, 1174.0], [17.8, 1175.0], [17.9, 1175.0], [18.0, 1175.0], [18.1, 1175.0], [18.2, 1177.0], [18.3, 1177.0], [18.4, 1177.0], [18.5, 1178.0], [18.6, 1178.0], [18.7, 1178.0], [18.8, 1179.0], [18.9, 1179.0], [19.0, 1179.0], [19.1, 1179.0], [19.2, 1180.0], [19.3, 1180.0], [19.4, 1180.0], [19.5, 1180.0], [19.6, 1180.0], [19.7, 1181.0], [19.8, 1181.0], [19.9, 1182.0], [20.0, 1182.0], [20.1, 1182.0], [20.2, 1183.0], [20.3, 1185.0], [20.4, 1185.0], [20.5, 1185.0], [20.6, 1187.0], [20.7, 1187.0], [20.8, 1187.0], [20.9, 1188.0], [21.0, 1189.0], [21.1, 1190.0], [21.2, 1190.0], [21.3, 1190.0], [21.4, 1190.0], [21.5, 1191.0], [21.6, 1192.0], [21.7, 1194.0], [21.8, 1195.0], [21.9, 1195.0], [22.0, 1196.0], [22.1, 1196.0], [22.2, 1196.0], [22.3, 1196.0], [22.4, 1196.0], [22.5, 1197.0], [22.6, 1197.0], [22.7, 1197.0], [22.8, 1198.0], [22.9, 1198.0], [23.0, 1199.0], [23.1, 1199.0], [23.2, 1200.0], [23.3, 1200.0], [23.4, 1200.0], [23.5, 1200.0], [23.6, 1201.0], [23.7, 1201.0], [23.8, 1202.0], [23.9, 1203.0], [24.0, 1204.0], [24.1, 1204.0], [24.2, 1204.0], [24.3, 1205.0], [24.4, 1205.0], [24.5, 1205.0], [24.6, 1205.0], [24.7, 1205.0], [24.8, 1206.0], [24.9, 1206.0], [25.0, 1207.0], [25.1, 1208.0], [25.2, 1208.0], [25.3, 1209.0], [25.4, 1209.0], [25.5, 1209.0], [25.6, 1209.0], [25.7, 1210.0], [25.8, 1210.0], [25.9, 1210.0], [26.0, 1210.0], [26.1, 1211.0], [26.2, 1211.0], [26.3, 1211.0], [26.4, 1211.0], [26.5, 1212.0], [26.6, 1212.0], [26.7, 1212.0], [26.8, 1213.0], [26.9, 1214.0], [27.0, 1214.0], [27.1, 1214.0], [27.2, 1214.0], [27.3, 1215.0], [27.4, 1215.0], [27.5, 1215.0], [27.6, 1216.0], [27.7, 1216.0], [27.8, 1216.0], [27.9, 1216.0], [28.0, 1216.0], [28.1, 1216.0], [28.2, 1217.0], [28.3, 1217.0], [28.4, 1217.0], [28.5, 1218.0], [28.6, 1218.0], [28.7, 1218.0], [28.8, 1218.0], [28.9, 1218.0], [29.0, 1218.0], [29.1, 1219.0], [29.2, 1219.0], [29.3, 1219.0], [29.4, 1220.0], [29.5, 1220.0], [29.6, 1220.0], [29.7, 1220.0], [29.8, 1220.0], [29.9, 1220.0], [30.0, 1220.0], [30.1, 1221.0], [30.2, 1221.0], [30.3, 1221.0], [30.4, 1222.0], [30.5, 1222.0], [30.6, 1222.0], [30.7, 1223.0], [30.8, 1223.0], [30.9, 1223.0], [31.0, 1223.0], [31.1, 1224.0], [31.2, 1224.0], [31.3, 1224.0], [31.4, 1224.0], [31.5, 1225.0], [31.6, 1226.0], [31.7, 1226.0], [31.8, 1226.0], [31.9, 1226.0], [32.0, 1227.0], [32.1, 1227.0], [32.2, 1227.0], [32.3, 1227.0], [32.4, 1227.0], [32.5, 1228.0], [32.6, 1228.0], [32.7, 1228.0], [32.8, 1229.0], [32.9, 1229.0], [33.0, 1230.0], [33.1, 1230.0], [33.2, 1230.0], [33.3, 1230.0], [33.4, 1230.0], [33.5, 1231.0], [33.6, 1231.0], [33.7, 1232.0], [33.8, 1232.0], [33.9, 1232.0], [34.0, 1232.0], [34.1, 1232.0], [34.2, 1233.0], [34.3, 1233.0], [34.4, 1233.0], [34.5, 1233.0], [34.6, 1234.0], [34.7, 1234.0], [34.8, 1234.0], [34.9, 1235.0], [35.0, 1235.0], [35.1, 1235.0], [35.2, 1235.0], [35.3, 1235.0], [35.4, 1236.0], [35.5, 1237.0], [35.6, 1237.0], [35.7, 1238.0], [35.8, 1238.0], [35.9, 1238.0], [36.0, 1239.0], [36.1, 1239.0], [36.2, 1239.0], [36.3, 1239.0], [36.4, 1239.0], [36.5, 1240.0], [36.6, 1240.0], [36.7, 1240.0], [36.8, 1241.0], [36.9, 1241.0], [37.0, 1241.0], [37.1, 1241.0], [37.2, 1242.0], [37.3, 1242.0], [37.4, 1242.0], [37.5, 1243.0], [37.6, 1243.0], [37.7, 1243.0], [37.8, 1243.0], [37.9, 1243.0], [38.0, 1244.0], [38.1, 1245.0], [38.2, 1245.0], [38.3, 1245.0], [38.4, 1246.0], [38.5, 1246.0], [38.6, 1247.0], [38.7, 1247.0], [38.8, 1247.0], [38.9, 1247.0], [39.0, 1248.0], [39.1, 1248.0], [39.2, 1248.0], [39.3, 1248.0], [39.4, 1248.0], [39.5, 1248.0], [39.6, 1249.0], [39.7, 1249.0], [39.8, 1249.0], [39.9, 1249.0], [40.0, 1249.0], [40.1, 1250.0], [40.2, 1250.0], [40.3, 1250.0], [40.4, 1250.0], [40.5, 1251.0], [40.6, 1251.0], [40.7, 1251.0], [40.8, 1251.0], [40.9, 1252.0], [41.0, 1252.0], [41.1, 1252.0], [41.2, 1252.0], [41.3, 1252.0], [41.4, 1252.0], [41.5, 1252.0], [41.6, 1252.0], [41.7, 1253.0], [41.8, 1253.0], [41.9, 1253.0], [42.0, 1253.0], [42.1, 1253.0], [42.2, 1253.0], [42.3, 1253.0], [42.4, 1253.0], [42.5, 1254.0], [42.6, 1254.0], [42.7, 1255.0], [42.8, 1255.0], [42.9, 1255.0], [43.0, 1255.0], [43.1, 1255.0], [43.2, 1256.0], [43.3, 1256.0], [43.4, 1256.0], [43.5, 1256.0], [43.6, 1256.0], [43.7, 1256.0], [43.8, 1257.0], [43.9, 1257.0], [44.0, 1257.0], [44.1, 1257.0], [44.2, 1257.0], [44.3, 1258.0], [44.4, 1258.0], [44.5, 1259.0], [44.6, 1259.0], [44.7, 1259.0], [44.8, 1259.0], [44.9, 1259.0], [45.0, 1260.0], [45.1, 1260.0], [45.2, 1260.0], [45.3, 1261.0], [45.4, 1261.0], [45.5, 1261.0], [45.6, 1261.0], [45.7, 1261.0], [45.8, 1261.0], [45.9, 1261.0], [46.0, 1262.0], [46.1, 1262.0], [46.2, 1262.0], [46.3, 1263.0], [46.4, 1263.0], [46.5, 1263.0], [46.6, 1264.0], [46.7, 1264.0], [46.8, 1264.0], [46.9, 1264.0], [47.0, 1265.0], [47.1, 1266.0], [47.2, 1267.0], [47.3, 1268.0], [47.4, 1268.0], [47.5, 1268.0], [47.6, 1268.0], [47.7, 1268.0], [47.8, 1269.0], [47.9, 1269.0], [48.0, 1269.0], [48.1, 1270.0], [48.2, 1270.0], [48.3, 1270.0], [48.4, 1270.0], [48.5, 1270.0], [48.6, 1271.0], [48.7, 1271.0], [48.8, 1272.0], [48.9, 1273.0], [49.0, 1273.0], [49.1, 1273.0], [49.2, 1273.0], [49.3, 1273.0], [49.4, 1274.0], [49.5, 1274.0], [49.6, 1274.0], [49.7, 1275.0], [49.8, 1275.0], [49.9, 1275.0], [50.0, 1275.0], [50.1, 1276.0], [50.2, 1276.0], [50.3, 1276.0], [50.4, 1276.0], [50.5, 1276.0], [50.6, 1276.0], [50.7, 1277.0], [50.8, 1277.0], [50.9, 1277.0], [51.0, 1277.0], [51.1, 1277.0], [51.2, 1277.0], [51.3, 1277.0], [51.4, 1278.0], [51.5, 1279.0], [51.6, 1279.0], [51.7, 1280.0], [51.8, 1280.0], [51.9, 1280.0], [52.0, 1280.0], [52.1, 1281.0], [52.2, 1281.0], [52.3, 1281.0], [52.4, 1281.0], [52.5, 1282.0], [52.6, 1282.0], [52.7, 1282.0], [52.8, 1283.0], [52.9, 1283.0], [53.0, 1283.0], [53.1, 1284.0], [53.2, 1284.0], [53.3, 1284.0], [53.4, 1284.0], [53.5, 1285.0], [53.6, 1285.0], [53.7, 1285.0], [53.8, 1286.0], [53.9, 1286.0], [54.0, 1286.0], [54.1, 1286.0], [54.2, 1287.0], [54.3, 1287.0], [54.4, 1287.0], [54.5, 1287.0], [54.6, 1287.0], [54.7, 1287.0], [54.8, 1287.0], [54.9, 1288.0], [55.0, 1288.0], [55.1, 1288.0], [55.2, 1288.0], [55.3, 1288.0], [55.4, 1289.0], [55.5, 1289.0], [55.6, 1289.0], [55.7, 1289.0], [55.8, 1290.0], [55.9, 1290.0], [56.0, 1290.0], [56.1, 1290.0], [56.2, 1290.0], [56.3, 1291.0], [56.4, 1291.0], [56.5, 1291.0], [56.6, 1291.0], [56.7, 1291.0], [56.8, 1291.0], [56.9, 1292.0], [57.0, 1292.0], [57.1, 1292.0], [57.2, 1292.0], [57.3, 1293.0], [57.4, 1293.0], [57.5, 1294.0], [57.6, 1294.0], [57.7, 1294.0], [57.8, 1294.0], [57.9, 1295.0], [58.0, 1295.0], [58.1, 1295.0], [58.2, 1295.0], [58.3, 1296.0], [58.4, 1296.0], [58.5, 1296.0], [58.6, 1296.0], [58.7, 1297.0], [58.8, 1297.0], [58.9, 1297.0], [59.0, 1297.0], [59.1, 1298.0], [59.2, 1298.0], [59.3, 1298.0], [59.4, 1298.0], [59.5, 1298.0], [59.6, 1299.0], [59.7, 1299.0], [59.8, 1299.0], [59.9, 1299.0], [60.0, 1299.0], [60.1, 1299.0], [60.2, 1300.0], [60.3, 1300.0], [60.4, 1300.0], [60.5, 1300.0], [60.6, 1300.0], [60.7, 1301.0], [60.8, 1301.0], [60.9, 1301.0], [61.0, 1301.0], [61.1, 1301.0], [61.2, 1302.0], [61.3, 1302.0], [61.4, 1302.0], [61.5, 1302.0], [61.6, 1302.0], [61.7, 1303.0], [61.8, 1303.0], [61.9, 1303.0], [62.0, 1303.0], [62.1, 1303.0], [62.2, 1303.0], [62.3, 1304.0], [62.4, 1305.0], [62.5, 1305.0], [62.6, 1305.0], [62.7, 1306.0], [62.8, 1306.0], [62.9, 1306.0], [63.0, 1306.0], [63.1, 1306.0], [63.2, 1306.0], [63.3, 1307.0], [63.4, 1307.0], [63.5, 1307.0], [63.6, 1308.0], [63.7, 1308.0], [63.8, 1308.0], [63.9, 1308.0], [64.0, 1309.0], [64.1, 1309.0], [64.2, 1309.0], [64.3, 1310.0], [64.4, 1310.0], [64.5, 1310.0], [64.6, 1310.0], [64.7, 1311.0], [64.8, 1311.0], [64.9, 1311.0], [65.0, 1311.0], [65.1, 1311.0], [65.2, 1311.0], [65.3, 1311.0], [65.4, 1312.0], [65.5, 1312.0], [65.6, 1312.0], [65.7, 1312.0], [65.8, 1313.0], [65.9, 1313.0], [66.0, 1313.0], [66.1, 1313.0], [66.2, 1314.0], [66.3, 1314.0], [66.4, 1315.0], [66.5, 1315.0], [66.6, 1315.0], [66.7, 1316.0], [66.8, 1316.0], [66.9, 1316.0], [67.0, 1316.0], [67.1, 1316.0], [67.2, 1317.0], [67.3, 1317.0], [67.4, 1317.0], [67.5, 1317.0], [67.6, 1318.0], [67.7, 1318.0], [67.8, 1318.0], [67.9, 1318.0], [68.0, 1319.0], [68.1, 1319.0], [68.2, 1320.0], [68.3, 1320.0], [68.4, 1320.0], [68.5, 1320.0], [68.6, 1320.0], [68.7, 1321.0], [68.8, 1321.0], [68.9, 1321.0], [69.0, 1321.0], [69.1, 1322.0], [69.2, 1322.0], [69.3, 1322.0], [69.4, 1322.0], [69.5, 1322.0], [69.6, 1322.0], [69.7, 1323.0], [69.8, 1323.0], [69.9, 1323.0], [70.0, 1323.0], [70.1, 1323.0], [70.2, 1324.0], [70.3, 1326.0], [70.4, 1326.0], [70.5, 1326.0], [70.6, 1327.0], [70.7, 1327.0], [70.8, 1328.0], [70.9, 1329.0], [71.0, 1329.0], [71.1, 1329.0], [71.2, 1330.0], [71.3, 1330.0], [71.4, 1330.0], [71.5, 1331.0], [71.6, 1331.0], [71.7, 1331.0], [71.8, 1331.0], [71.9, 1331.0], [72.0, 1331.0], [72.1, 1331.0], [72.2, 1332.0], [72.3, 1332.0], [72.4, 1334.0], [72.5, 1335.0], [72.6, 1336.0], [72.7, 1336.0], [72.8, 1336.0], [72.9, 1337.0], [73.0, 1337.0], [73.1, 1337.0], [73.2, 1337.0], [73.3, 1338.0], [73.4, 1338.0], [73.5, 1338.0], [73.6, 1339.0], [73.7, 1340.0], [73.8, 1340.0], [73.9, 1340.0], [74.0, 1341.0], [74.1, 1341.0], [74.2, 1341.0], [74.3, 1342.0], [74.4, 1343.0], [74.5, 1343.0], [74.6, 1343.0], [74.7, 1343.0], [74.8, 1343.0], [74.9, 1344.0], [75.0, 1344.0], [75.1, 1344.0], [75.2, 1345.0], [75.3, 1345.0], [75.4, 1346.0], [75.5, 1346.0], [75.6, 1349.0], [75.7, 1349.0], [75.8, 1350.0], [75.9, 1350.0], [76.0, 1350.0], [76.1, 1350.0], [76.2, 1351.0], [76.3, 1352.0], [76.4, 1352.0], [76.5, 1352.0], [76.6, 1352.0], [76.7, 1352.0], [76.8, 1353.0], [76.9, 1353.0], [77.0, 1354.0], [77.1, 1354.0], [77.2, 1354.0], [77.3, 1355.0], [77.4, 1356.0], [77.5, 1356.0], [77.6, 1356.0], [77.7, 1357.0], [77.8, 1357.0], [77.9, 1358.0], [78.0, 1358.0], [78.1, 1359.0], [78.2, 1360.0], [78.3, 1361.0], [78.4, 1361.0], [78.5, 1361.0], [78.6, 1362.0], [78.7, 1362.0], [78.8, 1362.0], [78.9, 1362.0], [79.0, 1363.0], [79.1, 1363.0], [79.2, 1365.0], [79.3, 1365.0], [79.4, 1366.0], [79.5, 1366.0], [79.6, 1366.0], [79.7, 1367.0], [79.8, 1367.0], [79.9, 1367.0], [80.0, 1368.0], [80.1, 1369.0], [80.2, 1370.0], [80.3, 1370.0], [80.4, 1370.0], [80.5, 1371.0], [80.6, 1371.0], [80.7, 1372.0], [80.8, 1373.0], [80.9, 1374.0], [81.0, 1375.0], [81.1, 1375.0], [81.2, 1376.0], [81.3, 1376.0], [81.4, 1377.0], [81.5, 1377.0], [81.6, 1377.0], [81.7, 1377.0], [81.8, 1377.0], [81.9, 1378.0], [82.0, 1381.0], [82.1, 1381.0], [82.2, 1381.0], [82.3, 1381.0], [82.4, 1382.0], [82.5, 1382.0], [82.6, 1382.0], [82.7, 1384.0], [82.8, 1384.0], [82.9, 1385.0], [83.0, 1385.0], [83.1, 1386.0], [83.2, 1387.0], [83.3, 1388.0], [83.4, 1388.0], [83.5, 1390.0], [83.6, 1390.0], [83.7, 1392.0], [83.8, 1392.0], [83.9, 1393.0], [84.0, 1393.0], [84.1, 1394.0], [84.2, 1394.0], [84.3, 1395.0], [84.4, 1395.0], [84.5, 1396.0], [84.6, 1397.0], [84.7, 1398.0], [84.8, 1400.0], [84.9, 1401.0], [85.0, 1401.0], [85.1, 1401.0], [85.2, 1401.0], [85.3, 1403.0], [85.4, 1403.0], [85.5, 1404.0], [85.6, 1404.0], [85.7, 1405.0], [85.8, 1408.0], [85.9, 1408.0], [86.0, 1410.0], [86.1, 1410.0], [86.2, 1411.0], [86.3, 1412.0], [86.4, 1413.0], [86.5, 1413.0], [86.6, 1415.0], [86.7, 1415.0], [86.8, 1416.0], [86.9, 1416.0], [87.0, 1418.0], [87.1, 1418.0], [87.2, 1419.0], [87.3, 1421.0], [87.4, 1422.0], [87.5, 1429.0], [87.6, 1430.0], [87.7, 1436.0], [87.8, 1441.0], [87.9, 1443.0], [88.0, 1445.0], [88.1, 1448.0], [88.2, 1450.0], [88.3, 1451.0], [88.4, 1452.0], [88.5, 1454.0], [88.6, 1458.0], [88.7, 1460.0], [88.8, 1461.0], [88.9, 1462.0], [89.0, 1462.0], [89.1, 1465.0], [89.2, 1467.0], [89.3, 1467.0], [89.4, 1469.0], [89.5, 1471.0], [89.6, 1472.0], [89.7, 1473.0], [89.8, 1476.0], [89.9, 1478.0], [90.0, 1479.0], [90.1, 1485.0], [90.2, 1485.0], [90.3, 1485.0], [90.4, 1494.0], [90.5, 1499.0], [90.6, 1500.0], [90.7, 1501.0], [90.8, 1502.0], [90.9, 1503.0], [91.0, 1504.0], [91.1, 1505.0], [91.2, 1505.0], [91.3, 1509.0], [91.4, 1510.0], [91.5, 1516.0], [91.6, 1520.0], [91.7, 1525.0], [91.8, 1533.0], [91.9, 1534.0], [92.0, 1540.0], [92.1, 1540.0], [92.2, 1547.0], [92.3, 1554.0], [92.4, 1561.0], [92.5, 1570.0], [92.6, 1573.0], [92.7, 1600.0], [92.8, 1605.0], [92.9, 1622.0], [93.0, 1627.0], [93.1, 1628.0], [93.2, 1633.0], [93.3, 1637.0], [93.4, 1658.0], [93.5, 1658.0], [93.6, 1670.0], [93.7, 1676.0], [93.8, 1682.0], [93.9, 1698.0], [94.0, 1713.0], [94.1, 1729.0], [94.2, 1732.0], [94.3, 1760.0], [94.4, 1766.0], [94.5, 1767.0], [94.6, 1826.0], [94.7, 1826.0], [94.8, 1854.0], [94.9, 1856.0], [95.0, 1857.0], [95.1, 1863.0], [95.2, 1890.0], [95.3, 1892.0], [95.4, 1892.0], [95.5, 1901.0], [95.6, 1908.0], [95.7, 1913.0], [95.8, 1923.0], [95.9, 1923.0], [96.0, 1928.0], [96.1, 1938.0], [96.2, 2021.0], [96.3, 2126.0], [96.4, 2148.0], [96.5, 2178.0], [96.6, 2182.0], [96.7, 2194.0], [96.8, 2195.0], [96.9, 2213.0], [97.0, 2226.0], [97.1, 2246.0], [97.2, 2259.0], [97.3, 2281.0], [97.4, 2291.0], [97.5, 2319.0], [97.6, 2352.0], [97.7, 2353.0], [97.8, 2361.0], [97.9, 2383.0], [98.0, 2392.0], [98.1, 2402.0], [98.2, 2416.0], [98.3, 2432.0], [98.4, 2437.0], [98.5, 2440.0], [98.6, 2447.0], [98.7, 2449.0], [98.8, 2452.0], [98.9, 2472.0], [99.0, 2486.0], [99.1, 2520.0], [99.2, 2552.0], [99.3, 2558.0], [99.4, 2560.0], [99.5, 2606.0], [99.6, 2670.0], [99.7, 2747.0], [99.8, 2792.0], [99.9, 2807.0]], "isOverall": false, "label": "Submit Idea", "isController": false}, {"data": [[0.0, 1992.0], [0.1, 2000.0], [0.2, 2057.0], [0.3, 2057.0], [0.4, 2071.0], [0.5, 2079.0], [0.6, 2083.0], [0.7, 2094.0], [0.8, 2115.0], [0.9, 2119.0], [1.0, 2130.0], [1.1, 2130.0], [1.2, 2138.0], [1.3, 2140.0], [1.4, 2140.0], [1.5, 2156.0], [1.6, 2162.0], [1.7, 2162.0], [1.8, 2163.0], [1.9, 2164.0], [2.0, 2165.0], [2.1, 2169.0], [2.2, 2173.0], [2.3, 2174.0], [2.4, 2183.0], [2.5, 2187.0], [2.6, 2190.0], [2.7, 2191.0], [2.8, 2196.0], [2.9, 2199.0], [3.0, 2201.0], [3.1, 2202.0], [3.2, 2202.0], [3.3, 2203.0], [3.4, 2204.0], [3.5, 2206.0], [3.6, 2207.0], [3.7, 2207.0], [3.8, 2208.0], [3.9, 2210.0], [4.0, 2217.0], [4.1, 2220.0], [4.2, 2221.0], [4.3, 2222.0], [4.4, 2222.0], [4.5, 2223.0], [4.6, 2224.0], [4.7, 2226.0], [4.8, 2227.0], [4.9, 2227.0], [5.0, 2228.0], [5.1, 2228.0], [5.2, 2230.0], [5.3, 2234.0], [5.4, 2238.0], [5.5, 2238.0], [5.6, 2238.0], [5.7, 2239.0], [5.8, 2241.0], [5.9, 2241.0], [6.0, 2242.0], [6.1, 2242.0], [6.2, 2242.0], [6.3, 2244.0], [6.4, 2245.0], [6.5, 2246.0], [6.6, 2248.0], [6.7, 2249.0], [6.8, 2249.0], [6.9, 2249.0], [7.0, 2250.0], [7.1, 2251.0], [7.2, 2252.0], [7.3, 2252.0], [7.4, 2252.0], [7.5, 2253.0], [7.6, 2255.0], [7.7, 2255.0], [7.8, 2258.0], [7.9, 2258.0], [8.0, 2260.0], [8.1, 2260.0], [8.2, 2260.0], [8.3, 2260.0], [8.4, 2261.0], [8.5, 2261.0], [8.6, 2261.0], [8.7, 2262.0], [8.8, 2262.0], [8.9, 2263.0], [9.0, 2266.0], [9.1, 2267.0], [9.2, 2268.0], [9.3, 2268.0], [9.4, 2268.0], [9.5, 2269.0], [9.6, 2270.0], [9.7, 2271.0], [9.8, 2273.0], [9.9, 2273.0], [10.0, 2274.0], [10.1, 2275.0], [10.2, 2275.0], [10.3, 2277.0], [10.4, 2277.0], [10.5, 2278.0], [10.6, 2280.0], [10.7, 2280.0], [10.8, 2281.0], [10.9, 2281.0], [11.0, 2282.0], [11.1, 2283.0], [11.2, 2285.0], [11.3, 2286.0], [11.4, 2288.0], [11.5, 2289.0], [11.6, 2291.0], [11.7, 2291.0], [11.8, 2292.0], [11.9, 2293.0], [12.0, 2293.0], [12.1, 2295.0], [12.2, 2296.0], [12.3, 2296.0], [12.4, 2296.0], [12.5, 2296.0], [12.6, 2298.0], [12.7, 2298.0], [12.8, 2299.0], [12.9, 2299.0], [13.0, 2299.0], [13.1, 2299.0], [13.2, 2300.0], [13.3, 2301.0], [13.4, 2301.0], [13.5, 2301.0], [13.6, 2303.0], [13.7, 2303.0], [13.8, 2306.0], [13.9, 2307.0], [14.0, 2308.0], [14.1, 2308.0], [14.2, 2308.0], [14.3, 2308.0], [14.4, 2308.0], [14.5, 2308.0], [14.6, 2309.0], [14.7, 2311.0], [14.8, 2311.0], [14.9, 2312.0], [15.0, 2313.0], [15.1, 2314.0], [15.2, 2314.0], [15.3, 2314.0], [15.4, 2314.0], [15.5, 2315.0], [15.6, 2315.0], [15.7, 2316.0], [15.8, 2316.0], [15.9, 2316.0], [16.0, 2317.0], [16.1, 2317.0], [16.2, 2318.0], [16.3, 2318.0], [16.4, 2318.0], [16.5, 2319.0], [16.6, 2319.0], [16.7, 2319.0], [16.8, 2319.0], [16.9, 2320.0], [17.0, 2321.0], [17.1, 2324.0], [17.2, 2325.0], [17.3, 2326.0], [17.4, 2327.0], [17.5, 2330.0], [17.6, 2332.0], [17.7, 2332.0], [17.8, 2333.0], [17.9, 2333.0], [18.0, 2334.0], [18.1, 2334.0], [18.2, 2334.0], [18.3, 2335.0], [18.4, 2335.0], [18.5, 2336.0], [18.6, 2337.0], [18.7, 2338.0], [18.8, 2339.0], [18.9, 2340.0], [19.0, 2340.0], [19.1, 2341.0], [19.2, 2341.0], [19.3, 2342.0], [19.4, 2342.0], [19.5, 2343.0], [19.6, 2343.0], [19.7, 2345.0], [19.8, 2345.0], [19.9, 2346.0], [20.0, 2348.0], [20.1, 2349.0], [20.2, 2350.0], [20.3, 2350.0], [20.4, 2352.0], [20.5, 2352.0], [20.6, 2353.0], [20.7, 2355.0], [20.8, 2356.0], [20.9, 2356.0], [21.0, 2357.0], [21.1, 2359.0], [21.2, 2359.0], [21.3, 2360.0], [21.4, 2361.0], [21.5, 2367.0], [21.6, 2367.0], [21.7, 2368.0], [21.8, 2368.0], [21.9, 2369.0], [22.0, 2369.0], [22.1, 2369.0], [22.2, 2370.0], [22.3, 2370.0], [22.4, 2371.0], [22.5, 2372.0], [22.6, 2372.0], [22.7, 2373.0], [22.8, 2373.0], [22.9, 2373.0], [23.0, 2374.0], [23.1, 2374.0], [23.2, 2375.0], [23.3, 2375.0], [23.4, 2375.0], [23.5, 2377.0], [23.6, 2377.0], [23.7, 2379.0], [23.8, 2380.0], [23.9, 2383.0], [24.0, 2384.0], [24.1, 2384.0], [24.2, 2384.0], [24.3, 2386.0], [24.4, 2387.0], [24.5, 2389.0], [24.6, 2390.0], [24.7, 2390.0], [24.8, 2390.0], [24.9, 2391.0], [25.0, 2392.0], [25.1, 2392.0], [25.2, 2393.0], [25.3, 2394.0], [25.4, 2395.0], [25.5, 2396.0], [25.6, 2398.0], [25.7, 2399.0], [25.8, 2399.0], [25.9, 2400.0], [26.0, 2400.0], [26.1, 2401.0], [26.2, 2401.0], [26.3, 2401.0], [26.4, 2402.0], [26.5, 2402.0], [26.6, 2402.0], [26.7, 2403.0], [26.8, 2403.0], [26.9, 2404.0], [27.0, 2404.0], [27.1, 2405.0], [27.2, 2406.0], [27.3, 2406.0], [27.4, 2406.0], [27.5, 2407.0], [27.6, 2407.0], [27.7, 2408.0], [27.8, 2409.0], [27.9, 2409.0], [28.0, 2409.0], [28.1, 2409.0], [28.2, 2410.0], [28.3, 2411.0], [28.4, 2413.0], [28.5, 2413.0], [28.6, 2413.0], [28.7, 2413.0], [28.8, 2414.0], [28.9, 2414.0], [29.0, 2414.0], [29.1, 2415.0], [29.2, 2416.0], [29.3, 2416.0], [29.4, 2416.0], [29.5, 2416.0], [29.6, 2416.0], [29.7, 2416.0], [29.8, 2417.0], [29.9, 2417.0], [30.0, 2417.0], [30.1, 2417.0], [30.2, 2417.0], [30.3, 2418.0], [30.4, 2418.0], [30.5, 2418.0], [30.6, 2419.0], [30.7, 2419.0], [30.8, 2419.0], [30.9, 2421.0], [31.0, 2421.0], [31.1, 2422.0], [31.2, 2422.0], [31.3, 2422.0], [31.4, 2423.0], [31.5, 2424.0], [31.6, 2424.0], [31.7, 2424.0], [31.8, 2424.0], [31.9, 2426.0], [32.0, 2426.0], [32.1, 2427.0], [32.2, 2427.0], [32.3, 2428.0], [32.4, 2429.0], [32.5, 2430.0], [32.6, 2430.0], [32.7, 2430.0], [32.8, 2430.0], [32.9, 2431.0], [33.0, 2431.0], [33.1, 2431.0], [33.2, 2432.0], [33.3, 2432.0], [33.4, 2433.0], [33.5, 2433.0], [33.6, 2433.0], [33.7, 2433.0], [33.8, 2434.0], [33.9, 2435.0], [34.0, 2435.0], [34.1, 2435.0], [34.2, 2435.0], [34.3, 2436.0], [34.4, 2436.0], [34.5, 2437.0], [34.6, 2438.0], [34.7, 2438.0], [34.8, 2438.0], [34.9, 2438.0], [35.0, 2439.0], [35.1, 2439.0], [35.2, 2440.0], [35.3, 2440.0], [35.4, 2440.0], [35.5, 2440.0], [35.6, 2441.0], [35.7, 2441.0], [35.8, 2441.0], [35.9, 2441.0], [36.0, 2442.0], [36.1, 2442.0], [36.2, 2443.0], [36.3, 2444.0], [36.4, 2445.0], [36.5, 2445.0], [36.6, 2445.0], [36.7, 2446.0], [36.8, 2446.0], [36.9, 2447.0], [37.0, 2447.0], [37.1, 2447.0], [37.2, 2447.0], [37.3, 2448.0], [37.4, 2448.0], [37.5, 2448.0], [37.6, 2449.0], [37.7, 2449.0], [37.8, 2450.0], [37.9, 2450.0], [38.0, 2451.0], [38.1, 2451.0], [38.2, 2451.0], [38.3, 2451.0], [38.4, 2451.0], [38.5, 2452.0], [38.6, 2452.0], [38.7, 2453.0], [38.8, 2453.0], [38.9, 2454.0], [39.0, 2454.0], [39.1, 2454.0], [39.2, 2454.0], [39.3, 2455.0], [39.4, 2455.0], [39.5, 2456.0], [39.6, 2456.0], [39.7, 2456.0], [39.8, 2457.0], [39.9, 2457.0], [40.0, 2457.0], [40.1, 2457.0], [40.2, 2458.0], [40.3, 2458.0], [40.4, 2459.0], [40.5, 2459.0], [40.6, 2460.0], [40.7, 2460.0], [40.8, 2461.0], [40.9, 2461.0], [41.0, 2461.0], [41.1, 2462.0], [41.2, 2462.0], [41.3, 2462.0], [41.4, 2463.0], [41.5, 2463.0], [41.6, 2463.0], [41.7, 2463.0], [41.8, 2464.0], [41.9, 2464.0], [42.0, 2464.0], [42.1, 2464.0], [42.2, 2464.0], [42.3, 2465.0], [42.4, 2465.0], [42.5, 2465.0], [42.6, 2465.0], [42.7, 2466.0], [42.8, 2466.0], [42.9, 2466.0], [43.0, 2466.0], [43.1, 2466.0], [43.2, 2467.0], [43.3, 2467.0], [43.4, 2467.0], [43.5, 2467.0], [43.6, 2468.0], [43.7, 2468.0], [43.8, 2469.0], [43.9, 2469.0], [44.0, 2469.0], [44.1, 2469.0], [44.2, 2470.0], [44.3, 2471.0], [44.4, 2471.0], [44.5, 2472.0], [44.6, 2472.0], [44.7, 2472.0], [44.8, 2473.0], [44.9, 2473.0], [45.0, 2474.0], [45.1, 2475.0], [45.2, 2475.0], [45.3, 2476.0], [45.4, 2476.0], [45.5, 2476.0], [45.6, 2476.0], [45.7, 2476.0], [45.8, 2476.0], [45.9, 2477.0], [46.0, 2477.0], [46.1, 2477.0], [46.2, 2477.0], [46.3, 2478.0], [46.4, 2478.0], [46.5, 2479.0], [46.6, 2479.0], [46.7, 2479.0], [46.8, 2480.0], [46.9, 2480.0], [47.0, 2482.0], [47.1, 2482.0], [47.2, 2482.0], [47.3, 2482.0], [47.4, 2482.0], [47.5, 2483.0], [47.6, 2483.0], [47.7, 2484.0], [47.8, 2485.0], [47.9, 2485.0], [48.0, 2485.0], [48.1, 2486.0], [48.2, 2486.0], [48.3, 2487.0], [48.4, 2487.0], [48.5, 2487.0], [48.6, 2487.0], [48.7, 2487.0], [48.8, 2488.0], [48.9, 2488.0], [49.0, 2488.0], [49.1, 2488.0], [49.2, 2488.0], [49.3, 2488.0], [49.4, 2489.0], [49.5, 2489.0], [49.6, 2489.0], [49.7, 2489.0], [49.8, 2490.0], [49.9, 2490.0], [50.0, 2490.0], [50.1, 2490.0], [50.2, 2491.0], [50.3, 2491.0], [50.4, 2491.0], [50.5, 2491.0], [50.6, 2491.0], [50.7, 2492.0], [50.8, 2492.0], [50.9, 2493.0], [51.0, 2494.0], [51.1, 2494.0], [51.2, 2494.0], [51.3, 2494.0], [51.4, 2494.0], [51.5, 2494.0], [51.6, 2495.0], [51.7, 2495.0], [51.8, 2495.0], [51.9, 2496.0], [52.0, 2497.0], [52.1, 2497.0], [52.2, 2497.0], [52.3, 2497.0], [52.4, 2498.0], [52.5, 2498.0], [52.6, 2498.0], [52.7, 2498.0], [52.8, 2499.0], [52.9, 2499.0], [53.0, 2499.0], [53.1, 2500.0], [53.2, 2500.0], [53.3, 2501.0], [53.4, 2502.0], [53.5, 2503.0], [53.6, 2503.0], [53.7, 2504.0], [53.8, 2504.0], [53.9, 2504.0], [54.0, 2504.0], [54.1, 2505.0], [54.2, 2505.0], [54.3, 2505.0], [54.4, 2505.0], [54.5, 2505.0], [54.6, 2506.0], [54.7, 2507.0], [54.8, 2507.0], [54.9, 2508.0], [55.0, 2508.0], [55.1, 2508.0], [55.2, 2508.0], [55.3, 2508.0], [55.4, 2508.0], [55.5, 2508.0], [55.6, 2509.0], [55.7, 2509.0], [55.8, 2509.0], [55.9, 2509.0], [56.0, 2509.0], [56.1, 2509.0], [56.2, 2510.0], [56.3, 2510.0], [56.4, 2510.0], [56.5, 2511.0], [56.6, 2513.0], [56.7, 2513.0], [56.8, 2513.0], [56.9, 2514.0], [57.0, 2514.0], [57.1, 2515.0], [57.2, 2516.0], [57.3, 2516.0], [57.4, 2516.0], [57.5, 2516.0], [57.6, 2516.0], [57.7, 2517.0], [57.8, 2517.0], [57.9, 2517.0], [58.0, 2517.0], [58.1, 2517.0], [58.2, 2518.0], [58.3, 2518.0], [58.4, 2518.0], [58.5, 2518.0], [58.6, 2519.0], [58.7, 2519.0], [58.8, 2519.0], [58.9, 2519.0], [59.0, 2519.0], [59.1, 2520.0], [59.2, 2521.0], [59.3, 2521.0], [59.4, 2522.0], [59.5, 2522.0], [59.6, 2522.0], [59.7, 2523.0], [59.8, 2524.0], [59.9, 2525.0], [60.0, 2525.0], [60.1, 2525.0], [60.2, 2525.0], [60.3, 2525.0], [60.4, 2526.0], [60.5, 2526.0], [60.6, 2526.0], [60.7, 2526.0], [60.8, 2527.0], [60.9, 2527.0], [61.0, 2527.0], [61.1, 2528.0], [61.2, 2528.0], [61.3, 2528.0], [61.4, 2529.0], [61.5, 2529.0], [61.6, 2529.0], [61.7, 2530.0], [61.8, 2530.0], [61.9, 2531.0], [62.0, 2531.0], [62.1, 2532.0], [62.2, 2532.0], [62.3, 2533.0], [62.4, 2533.0], [62.5, 2533.0], [62.6, 2535.0], [62.7, 2536.0], [62.8, 2536.0], [62.9, 2536.0], [63.0, 2536.0], [63.1, 2536.0], [63.2, 2537.0], [63.3, 2537.0], [63.4, 2538.0], [63.5, 2538.0], [63.6, 2538.0], [63.7, 2538.0], [63.8, 2538.0], [63.9, 2538.0], [64.0, 2539.0], [64.1, 2540.0], [64.2, 2540.0], [64.3, 2541.0], [64.4, 2541.0], [64.5, 2541.0], [64.6, 2541.0], [64.7, 2542.0], [64.8, 2542.0], [64.9, 2543.0], [65.0, 2543.0], [65.1, 2543.0], [65.2, 2544.0], [65.3, 2544.0], [65.4, 2544.0], [65.5, 2544.0], [65.6, 2545.0], [65.7, 2545.0], [65.8, 2545.0], [65.9, 2546.0], [66.0, 2546.0], [66.1, 2546.0], [66.2, 2546.0], [66.3, 2547.0], [66.4, 2547.0], [66.5, 2547.0], [66.6, 2549.0], [66.7, 2549.0], [66.8, 2550.0], [66.9, 2551.0], [67.0, 2552.0], [67.1, 2553.0], [67.2, 2553.0], [67.3, 2555.0], [67.4, 2555.0], [67.5, 2555.0], [67.6, 2556.0], [67.7, 2557.0], [67.8, 2557.0], [67.9, 2557.0], [68.0, 2557.0], [68.1, 2558.0], [68.2, 2559.0], [68.3, 2559.0], [68.4, 2559.0], [68.5, 2559.0], [68.6, 2559.0], [68.7, 2559.0], [68.8, 2559.0], [68.9, 2560.0], [69.0, 2560.0], [69.1, 2560.0], [69.2, 2560.0], [69.3, 2561.0], [69.4, 2561.0], [69.5, 2561.0], [69.6, 2562.0], [69.7, 2564.0], [69.8, 2564.0], [69.9, 2564.0], [70.0, 2564.0], [70.1, 2565.0], [70.2, 2565.0], [70.3, 2566.0], [70.4, 2567.0], [70.5, 2567.0], [70.6, 2568.0], [70.7, 2568.0], [70.8, 2568.0], [70.9, 2569.0], [71.0, 2569.0], [71.1, 2569.0], [71.2, 2569.0], [71.3, 2570.0], [71.4, 2570.0], [71.5, 2571.0], [71.6, 2572.0], [71.7, 2573.0], [71.8, 2573.0], [71.9, 2574.0], [72.0, 2575.0], [72.1, 2576.0], [72.2, 2577.0], [72.3, 2577.0], [72.4, 2578.0], [72.5, 2579.0], [72.6, 2581.0], [72.7, 2582.0], [72.8, 2583.0], [72.9, 2583.0], [73.0, 2583.0], [73.1, 2584.0], [73.2, 2584.0], [73.3, 2586.0], [73.4, 2588.0], [73.5, 2589.0], [73.6, 2589.0], [73.7, 2589.0], [73.8, 2590.0], [73.9, 2590.0], [74.0, 2591.0], [74.1, 2591.0], [74.2, 2591.0], [74.3, 2592.0], [74.4, 2593.0], [74.5, 2593.0], [74.6, 2594.0], [74.7, 2594.0], [74.8, 2595.0], [74.9, 2595.0], [75.0, 2596.0], [75.1, 2597.0], [75.2, 2598.0], [75.3, 2598.0], [75.4, 2599.0], [75.5, 2601.0], [75.6, 2601.0], [75.7, 2603.0], [75.8, 2603.0], [75.9, 2603.0], [76.0, 2604.0], [76.1, 2604.0], [76.2, 2605.0], [76.3, 2606.0], [76.4, 2606.0], [76.5, 2607.0], [76.6, 2607.0], [76.7, 2607.0], [76.8, 2608.0], [76.9, 2608.0], [77.0, 2609.0], [77.1, 2609.0], [77.2, 2609.0], [77.3, 2609.0], [77.4, 2611.0], [77.5, 2612.0], [77.6, 2614.0], [77.7, 2614.0], [77.8, 2615.0], [77.9, 2615.0], [78.0, 2616.0], [78.1, 2617.0], [78.2, 2617.0], [78.3, 2618.0], [78.4, 2619.0], [78.5, 2621.0], [78.6, 2621.0], [78.7, 2623.0], [78.8, 2623.0], [78.9, 2625.0], [79.0, 2626.0], [79.1, 2627.0], [79.2, 2627.0], [79.3, 2627.0], [79.4, 2628.0], [79.5, 2630.0], [79.6, 2631.0], [79.7, 2631.0], [79.8, 2632.0], [79.9, 2632.0], [80.0, 2632.0], [80.1, 2632.0], [80.2, 2634.0], [80.3, 2636.0], [80.4, 2636.0], [80.5, 2636.0], [80.6, 2638.0], [80.7, 2638.0], [80.8, 2639.0], [80.9, 2639.0], [81.0, 2639.0], [81.1, 2640.0], [81.2, 2641.0], [81.3, 2643.0], [81.4, 2643.0], [81.5, 2644.0], [81.6, 2649.0], [81.7, 2650.0], [81.8, 2650.0], [81.9, 2651.0], [82.0, 2651.0], [82.1, 2652.0], [82.2, 2655.0], [82.3, 2655.0], [82.4, 2656.0], [82.5, 2657.0], [82.6, 2657.0], [82.7, 2657.0], [82.8, 2657.0], [82.9, 2659.0], [83.0, 2660.0], [83.1, 2660.0], [83.2, 2660.0], [83.3, 2661.0], [83.4, 2663.0], [83.5, 2663.0], [83.6, 2664.0], [83.7, 2664.0], [83.8, 2666.0], [83.9, 2668.0], [84.0, 2669.0], [84.1, 2669.0], [84.2, 2670.0], [84.3, 2670.0], [84.4, 2671.0], [84.5, 2672.0], [84.6, 2673.0], [84.7, 2673.0], [84.8, 2674.0], [84.9, 2674.0], [85.0, 2674.0], [85.1, 2678.0], [85.2, 2679.0], [85.3, 2679.0], [85.4, 2680.0], [85.5, 2681.0], [85.6, 2682.0], [85.7, 2684.0], [85.8, 2685.0], [85.9, 2686.0], [86.0, 2687.0], [86.1, 2689.0], [86.2, 2691.0], [86.3, 2694.0], [86.4, 2694.0], [86.5, 2696.0], [86.6, 2697.0], [86.7, 2698.0], [86.8, 2698.0], [86.9, 2699.0], [87.0, 2701.0], [87.1, 2702.0], [87.2, 2702.0], [87.3, 2706.0], [87.4, 2706.0], [87.5, 2707.0], [87.6, 2709.0], [87.7, 2712.0], [87.8, 2714.0], [87.9, 2715.0], [88.0, 2716.0], [88.1, 2716.0], [88.2, 2716.0], [88.3, 2718.0], [88.4, 2719.0], [88.5, 2720.0], [88.6, 2720.0], [88.7, 2721.0], [88.8, 2724.0], [88.9, 2725.0], [89.0, 2725.0], [89.1, 2730.0], [89.2, 2735.0], [89.3, 2737.0], [89.4, 2742.0], [89.5, 2742.0], [89.6, 2744.0], [89.7, 2748.0], [89.8, 2753.0], [89.9, 2759.0], [90.0, 2761.0], [90.1, 2771.0], [90.2, 2774.0], [90.3, 2775.0], [90.4, 2775.0], [90.5, 2778.0], [90.6, 2779.0], [90.7, 2780.0], [90.8, 2781.0], [90.9, 2782.0], [91.0, 2793.0], [91.1, 2794.0], [91.2, 2795.0], [91.3, 2800.0], [91.4, 2804.0], [91.5, 2808.0], [91.6, 2810.0], [91.7, 2814.0], [91.8, 2824.0], [91.9, 2825.0], [92.0, 2834.0], [92.1, 2848.0], [92.2, 2856.0], [92.3, 2856.0], [92.4, 2867.0], [92.5, 2887.0], [92.6, 2906.0], [92.7, 2939.0], [92.8, 2951.0], [92.9, 2974.0], [93.0, 2975.0], [93.1, 2987.0], [93.2, 3006.0], [93.3, 3011.0], [93.4, 3016.0], [93.5, 3017.0], [93.6, 3067.0], [93.7, 3071.0], [93.8, 3073.0], [93.9, 3078.0], [94.0, 3118.0], [94.1, 3118.0], [94.2, 3121.0], [94.3, 3123.0], [94.4, 3135.0], [94.5, 3137.0], [94.6, 3138.0], [94.7, 3141.0], [94.8, 3166.0], [94.9, 3175.0], [95.0, 3177.0], [95.1, 3193.0], [95.2, 3203.0], [95.3, 3220.0], [95.4, 3228.0], [95.5, 3237.0], [95.6, 3237.0], [95.7, 3245.0], [95.8, 3383.0], [95.9, 3396.0], [96.0, 3407.0], [96.1, 3440.0], [96.2, 3442.0], [96.3, 3450.0], [96.4, 3462.0], [96.5, 3467.0], [96.6, 3485.0], [96.7, 3491.0], [96.8, 3500.0], [96.9, 3503.0], [97.0, 3523.0], [97.1, 3532.0], [97.2, 3603.0], [97.3, 3614.0], [97.4, 3617.0], [97.5, 3631.0], [97.6, 3636.0], [97.7, 3643.0], [97.8, 3644.0], [97.9, 3655.0], [98.0, 3674.0], [98.1, 3676.0], [98.2, 3686.0], [98.3, 3690.0], [98.4, 3699.0], [98.5, 3722.0], [98.6, 3727.0], [98.7, 3731.0], [98.8, 3738.0], [98.9, 3767.0], [99.0, 3816.0], [99.1, 3827.0], [99.2, 3858.0], [99.3, 3859.0], [99.4, 3864.0], [99.5, 3870.0], [99.6, 3992.0], [99.7, 4028.0], [99.8, 4125.0], [99.9, 4663.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[0.0, 889.0], [0.1, 914.0], [0.2, 920.0], [0.3, 920.0], [0.4, 927.0], [0.5, 928.0], [0.6, 931.0], [0.7, 942.0], [0.8, 943.0], [0.9, 946.0], [1.0, 952.0], [1.1, 956.0], [1.2, 962.0], [1.3, 966.0], [1.4, 966.0], [1.5, 970.0], [1.6, 975.0], [1.7, 979.0], [1.8, 987.0], [1.9, 988.0], [2.0, 990.0], [2.1, 990.0], [2.2, 990.0], [2.3, 991.0], [2.4, 991.0], [2.5, 992.0], [2.6, 995.0], [2.7, 995.0], [2.8, 996.0], [2.9, 996.0], [3.0, 1000.0], [3.1, 1002.0], [3.2, 1012.0], [3.3, 1012.0], [3.4, 1016.0], [3.5, 1018.0], [3.6, 1018.0], [3.7, 1021.0], [3.8, 1027.0], [3.9, 1028.0], [4.0, 1030.0], [4.1, 1031.0], [4.2, 1031.0], [4.3, 1033.0], [4.4, 1033.0], [4.5, 1037.0], [4.6, 1038.0], [4.7, 1046.0], [4.8, 1050.0], [4.9, 1054.0], [5.0, 1054.0], [5.1, 1057.0], [5.2, 1064.0], [5.3, 1065.0], [5.4, 1066.0], [5.5, 1066.0], [5.6, 1069.0], [5.7, 1071.0], [5.8, 1072.0], [5.9, 1072.0], [6.0, 1075.0], [6.1, 1076.0], [6.2, 1078.0], [6.3, 1082.0], [6.4, 1083.0], [6.5, 1083.0], [6.6, 1086.0], [6.7, 1086.0], [6.8, 1086.0], [6.9, 1086.0], [7.0, 1087.0], [7.1, 1087.0], [7.2, 1093.0], [7.3, 1096.0], [7.4, 1099.0], [7.5, 1100.0], [7.6, 1100.0], [7.7, 1101.0], [7.8, 1101.0], [7.9, 1101.0], [8.0, 1102.0], [8.1, 1103.0], [8.2, 1103.0], [8.3, 1105.0], [8.4, 1105.0], [8.5, 1105.0], [8.6, 1106.0], [8.7, 1108.0], [8.8, 1110.0], [8.9, 1110.0], [9.0, 1110.0], [9.1, 1111.0], [9.2, 1111.0], [9.3, 1111.0], [9.4, 1112.0], [9.5, 1112.0], [9.6, 1113.0], [9.7, 1113.0], [9.8, 1114.0], [9.9, 1114.0], [10.0, 1114.0], [10.1, 1115.0], [10.2, 1115.0], [10.3, 1115.0], [10.4, 1115.0], [10.5, 1116.0], [10.6, 1117.0], [10.7, 1117.0], [10.8, 1117.0], [10.9, 1117.0], [11.0, 1118.0], [11.1, 1118.0], [11.2, 1118.0], [11.3, 1118.0], [11.4, 1119.0], [11.5, 1119.0], [11.6, 1120.0], [11.7, 1121.0], [11.8, 1121.0], [11.9, 1121.0], [12.0, 1122.0], [12.1, 1122.0], [12.2, 1123.0], [12.3, 1124.0], [12.4, 1124.0], [12.5, 1124.0], [12.6, 1125.0], [12.7, 1125.0], [12.8, 1125.0], [12.9, 1126.0], [13.0, 1126.0], [13.1, 1127.0], [13.2, 1127.0], [13.3, 1128.0], [13.4, 1128.0], [13.5, 1128.0], [13.6, 1128.0], [13.7, 1128.0], [13.8, 1128.0], [13.9, 1129.0], [14.0, 1129.0], [14.1, 1129.0], [14.2, 1129.0], [14.3, 1130.0], [14.4, 1131.0], [14.5, 1131.0], [14.6, 1131.0], [14.7, 1131.0], [14.8, 1131.0], [14.9, 1132.0], [15.0, 1132.0], [15.1, 1132.0], [15.2, 1132.0], [15.3, 1132.0], [15.4, 1134.0], [15.5, 1134.0], [15.6, 1134.0], [15.7, 1135.0], [15.8, 1136.0], [15.9, 1136.0], [16.0, 1136.0], [16.1, 1136.0], [16.2, 1136.0], [16.3, 1136.0], [16.4, 1137.0], [16.5, 1137.0], [16.6, 1137.0], [16.7, 1137.0], [16.8, 1138.0], [16.9, 1138.0], [17.0, 1138.0], [17.1, 1139.0], [17.2, 1139.0], [17.3, 1140.0], [17.4, 1140.0], [17.5, 1140.0], [17.6, 1140.0], [17.7, 1141.0], [17.8, 1141.0], [17.9, 1142.0], [18.0, 1142.0], [18.1, 1142.0], [18.2, 1142.0], [18.3, 1142.0], [18.4, 1142.0], [18.5, 1142.0], [18.6, 1143.0], [18.7, 1143.0], [18.8, 1144.0], [18.9, 1144.0], [19.0, 1145.0], [19.1, 1145.0], [19.2, 1145.0], [19.3, 1145.0], [19.4, 1146.0], [19.5, 1146.0], [19.6, 1146.0], [19.7, 1147.0], [19.8, 1147.0], [19.9, 1147.0], [20.0, 1147.0], [20.1, 1147.0], [20.2, 1148.0], [20.3, 1148.0], [20.4, 1148.0], [20.5, 1148.0], [20.6, 1148.0], [20.7, 1148.0], [20.8, 1149.0], [20.9, 1149.0], [21.0, 1149.0], [21.1, 1149.0], [21.2, 1149.0], [21.3, 1149.0], [21.4, 1149.0], [21.5, 1150.0], [21.6, 1150.0], [21.7, 1150.0], [21.8, 1150.0], [21.9, 1150.0], [22.0, 1150.0], [22.1, 1151.0], [22.2, 1151.0], [22.3, 1151.0], [22.4, 1152.0], [22.5, 1152.0], [22.6, 1153.0], [22.7, 1153.0], [22.8, 1153.0], [22.9, 1153.0], [23.0, 1153.0], [23.1, 1154.0], [23.2, 1155.0], [23.3, 1155.0], [23.4, 1155.0], [23.5, 1156.0], [23.6, 1156.0], [23.7, 1156.0], [23.8, 1156.0], [23.9, 1156.0], [24.0, 1156.0], [24.1, 1156.0], [24.2, 1157.0], [24.3, 1157.0], [24.4, 1157.0], [24.5, 1157.0], [24.6, 1158.0], [24.7, 1158.0], [24.8, 1158.0], [24.9, 1158.0], [25.0, 1158.0], [25.1, 1158.0], [25.2, 1158.0], [25.3, 1159.0], [25.4, 1159.0], [25.5, 1159.0], [25.6, 1160.0], [25.7, 1160.0], [25.8, 1160.0], [25.9, 1161.0], [26.0, 1162.0], [26.1, 1162.0], [26.2, 1162.0], [26.3, 1162.0], [26.4, 1162.0], [26.5, 1163.0], [26.6, 1163.0], [26.7, 1163.0], [26.8, 1164.0], [26.9, 1164.0], [27.0, 1164.0], [27.1, 1165.0], [27.2, 1165.0], [27.3, 1165.0], [27.4, 1165.0], [27.5, 1165.0], [27.6, 1165.0], [27.7, 1166.0], [27.8, 1166.0], [27.9, 1166.0], [28.0, 1166.0], [28.1, 1166.0], [28.2, 1167.0], [28.3, 1167.0], [28.4, 1167.0], [28.5, 1168.0], [28.6, 1168.0], [28.7, 1168.0], [28.8, 1168.0], [28.9, 1168.0], [29.0, 1168.0], [29.1, 1168.0], [29.2, 1169.0], [29.3, 1169.0], [29.4, 1169.0], [29.5, 1169.0], [29.6, 1169.0], [29.7, 1170.0], [29.8, 1170.0], [29.9, 1170.0], [30.0, 1171.0], [30.1, 1171.0], [30.2, 1171.0], [30.3, 1171.0], [30.4, 1171.0], [30.5, 1171.0], [30.6, 1171.0], [30.7, 1172.0], [30.8, 1172.0], [30.9, 1173.0], [31.0, 1173.0], [31.1, 1173.0], [31.2, 1173.0], [31.3, 1173.0], [31.4, 1173.0], [31.5, 1174.0], [31.6, 1175.0], [31.7, 1175.0], [31.8, 1175.0], [31.9, 1175.0], [32.0, 1176.0], [32.1, 1176.0], [32.2, 1176.0], [32.3, 1177.0], [32.4, 1177.0], [32.5, 1178.0], [32.6, 1178.0], [32.7, 1178.0], [32.8, 1178.0], [32.9, 1178.0], [33.0, 1178.0], [33.1, 1178.0], [33.2, 1179.0], [33.3, 1179.0], [33.4, 1179.0], [33.5, 1179.0], [33.6, 1179.0], [33.7, 1179.0], [33.8, 1179.0], [33.9, 1180.0], [34.0, 1180.0], [34.1, 1180.0], [34.2, 1180.0], [34.3, 1180.0], [34.4, 1180.0], [34.5, 1181.0], [34.6, 1181.0], [34.7, 1181.0], [34.8, 1181.0], [34.9, 1182.0], [35.0, 1182.0], [35.1, 1182.0], [35.2, 1182.0], [35.3, 1182.0], [35.4, 1183.0], [35.5, 1183.0], [35.6, 1183.0], [35.7, 1183.0], [35.8, 1183.0], [35.9, 1183.0], [36.0, 1184.0], [36.1, 1184.0], [36.2, 1185.0], [36.3, 1185.0], [36.4, 1185.0], [36.5, 1186.0], [36.6, 1186.0], [36.7, 1186.0], [36.8, 1186.0], [36.9, 1186.0], [37.0, 1186.0], [37.1, 1187.0], [37.2, 1187.0], [37.3, 1187.0], [37.4, 1187.0], [37.5, 1187.0], [37.6, 1187.0], [37.7, 1188.0], [37.8, 1188.0], [37.9, 1188.0], [38.0, 1188.0], [38.1, 1188.0], [38.2, 1189.0], [38.3, 1190.0], [38.4, 1190.0], [38.5, 1190.0], [38.6, 1190.0], [38.7, 1190.0], [38.8, 1190.0], [38.9, 1191.0], [39.0, 1191.0], [39.1, 1191.0], [39.2, 1191.0], [39.3, 1191.0], [39.4, 1191.0], [39.5, 1191.0], [39.6, 1191.0], [39.7, 1191.0], [39.8, 1192.0], [39.9, 1192.0], [40.0, 1192.0], [40.1, 1192.0], [40.2, 1192.0], [40.3, 1192.0], [40.4, 1193.0], [40.5, 1193.0], [40.6, 1193.0], [40.7, 1193.0], [40.8, 1194.0], [40.9, 1194.0], [41.0, 1195.0], [41.1, 1195.0], [41.2, 1195.0], [41.3, 1195.0], [41.4, 1195.0], [41.5, 1196.0], [41.6, 1196.0], [41.7, 1196.0], [41.8, 1196.0], [41.9, 1196.0], [42.0, 1196.0], [42.1, 1196.0], [42.2, 1196.0], [42.3, 1197.0], [42.4, 1197.0], [42.5, 1197.0], [42.6, 1197.0], [42.7, 1197.0], [42.8, 1197.0], [42.9, 1197.0], [43.0, 1198.0], [43.1, 1198.0], [43.2, 1198.0], [43.3, 1198.0], [43.4, 1198.0], [43.5, 1198.0], [43.6, 1199.0], [43.7, 1199.0], [43.8, 1199.0], [43.9, 1199.0], [44.0, 1199.0], [44.1, 1199.0], [44.2, 1200.0], [44.3, 1200.0], [44.4, 1200.0], [44.5, 1200.0], [44.6, 1200.0], [44.7, 1201.0], [44.8, 1201.0], [44.9, 1201.0], [45.0, 1201.0], [45.1, 1202.0], [45.2, 1202.0], [45.3, 1202.0], [45.4, 1202.0], [45.5, 1202.0], [45.6, 1202.0], [45.7, 1202.0], [45.8, 1202.0], [45.9, 1203.0], [46.0, 1203.0], [46.1, 1203.0], [46.2, 1203.0], [46.3, 1203.0], [46.4, 1204.0], [46.5, 1204.0], [46.6, 1204.0], [46.7, 1204.0], [46.8, 1204.0], [46.9, 1204.0], [47.0, 1205.0], [47.1, 1205.0], [47.2, 1205.0], [47.3, 1206.0], [47.4, 1206.0], [47.5, 1206.0], [47.6, 1206.0], [47.7, 1207.0], [47.8, 1207.0], [47.9, 1207.0], [48.0, 1208.0], [48.1, 1208.0], [48.2, 1208.0], [48.3, 1208.0], [48.4, 1208.0], [48.5, 1209.0], [48.6, 1209.0], [48.7, 1210.0], [48.8, 1210.0], [48.9, 1210.0], [49.0, 1210.0], [49.1, 1211.0], [49.2, 1211.0], [49.3, 1211.0], [49.4, 1211.0], [49.5, 1211.0], [49.6, 1211.0], [49.7, 1211.0], [49.8, 1211.0], [49.9, 1212.0], [50.0, 1212.0], [50.1, 1212.0], [50.2, 1212.0], [50.3, 1212.0], [50.4, 1212.0], [50.5, 1212.0], [50.6, 1212.0], [50.7, 1213.0], [50.8, 1213.0], [50.9, 1213.0], [51.0, 1213.0], [51.1, 1213.0], [51.2, 1213.0], [51.3, 1213.0], [51.4, 1214.0], [51.5, 1214.0], [51.6, 1214.0], [51.7, 1215.0], [51.8, 1215.0], [51.9, 1215.0], [52.0, 1215.0], [52.1, 1216.0], [52.2, 1216.0], [52.3, 1216.0], [52.4, 1216.0], [52.5, 1216.0], [52.6, 1216.0], [52.7, 1216.0], [52.8, 1216.0], [52.9, 1217.0], [53.0, 1217.0], [53.1, 1218.0], [53.2, 1218.0], [53.3, 1218.0], [53.4, 1219.0], [53.5, 1219.0], [53.6, 1219.0], [53.7, 1220.0], [53.8, 1220.0], [53.9, 1221.0], [54.0, 1221.0], [54.1, 1221.0], [54.2, 1221.0], [54.3, 1221.0], [54.4, 1221.0], [54.5, 1221.0], [54.6, 1222.0], [54.7, 1222.0], [54.8, 1222.0], [54.9, 1222.0], [55.0, 1223.0], [55.1, 1223.0], [55.2, 1223.0], [55.3, 1223.0], [55.4, 1223.0], [55.5, 1223.0], [55.6, 1223.0], [55.7, 1223.0], [55.8, 1224.0], [55.9, 1224.0], [56.0, 1224.0], [56.1, 1224.0], [56.2, 1225.0], [56.3, 1225.0], [56.4, 1225.0], [56.5, 1225.0], [56.6, 1225.0], [56.7, 1225.0], [56.8, 1226.0], [56.9, 1226.0], [57.0, 1226.0], [57.1, 1226.0], [57.2, 1226.0], [57.3, 1227.0], [57.4, 1227.0], [57.5, 1227.0], [57.6, 1228.0], [57.7, 1228.0], [57.8, 1228.0], [57.9, 1228.0], [58.0, 1228.0], [58.1, 1229.0], [58.2, 1229.0], [58.3, 1229.0], [58.4, 1229.0], [58.5, 1229.0], [58.6, 1229.0], [58.7, 1230.0], [58.8, 1231.0], [58.9, 1231.0], [59.0, 1231.0], [59.1, 1231.0], [59.2, 1231.0], [59.3, 1232.0], [59.4, 1232.0], [59.5, 1232.0], [59.6, 1233.0], [59.7, 1234.0], [59.8, 1234.0], [59.9, 1234.0], [60.0, 1234.0], [60.1, 1235.0], [60.2, 1235.0], [60.3, 1235.0], [60.4, 1235.0], [60.5, 1235.0], [60.6, 1235.0], [60.7, 1235.0], [60.8, 1236.0], [60.9, 1236.0], [61.0, 1236.0], [61.1, 1236.0], [61.2, 1236.0], [61.3, 1236.0], [61.4, 1236.0], [61.5, 1237.0], [61.6, 1237.0], [61.7, 1237.0], [61.8, 1237.0], [61.9, 1237.0], [62.0, 1237.0], [62.1, 1238.0], [62.2, 1239.0], [62.3, 1239.0], [62.4, 1239.0], [62.5, 1239.0], [62.6, 1240.0], [62.7, 1240.0], [62.8, 1240.0], [62.9, 1241.0], [63.0, 1241.0], [63.1, 1241.0], [63.2, 1241.0], [63.3, 1241.0], [63.4, 1241.0], [63.5, 1242.0], [63.6, 1242.0], [63.7, 1242.0], [63.8, 1242.0], [63.9, 1242.0], [64.0, 1242.0], [64.1, 1242.0], [64.2, 1242.0], [64.3, 1242.0], [64.4, 1243.0], [64.5, 1243.0], [64.6, 1243.0], [64.7, 1243.0], [64.8, 1243.0], [64.9, 1244.0], [65.0, 1244.0], [65.1, 1244.0], [65.2, 1244.0], [65.3, 1244.0], [65.4, 1244.0], [65.5, 1244.0], [65.6, 1244.0], [65.7, 1245.0], [65.8, 1245.0], [65.9, 1245.0], [66.0, 1245.0], [66.1, 1245.0], [66.2, 1245.0], [66.3, 1246.0], [66.4, 1246.0], [66.5, 1247.0], [66.6, 1247.0], [66.7, 1247.0], [66.8, 1247.0], [66.9, 1248.0], [67.0, 1248.0], [67.1, 1248.0], [67.2, 1249.0], [67.3, 1249.0], [67.4, 1249.0], [67.5, 1249.0], [67.6, 1249.0], [67.7, 1250.0], [67.8, 1250.0], [67.9, 1250.0], [68.0, 1250.0], [68.1, 1250.0], [68.2, 1251.0], [68.3, 1251.0], [68.4, 1251.0], [68.5, 1251.0], [68.6, 1251.0], [68.7, 1252.0], [68.8, 1252.0], [68.9, 1252.0], [69.0, 1252.0], [69.1, 1252.0], [69.2, 1253.0], [69.3, 1253.0], [69.4, 1254.0], [69.5, 1254.0], [69.6, 1254.0], [69.7, 1255.0], [69.8, 1255.0], [69.9, 1256.0], [70.0, 1256.0], [70.1, 1256.0], [70.2, 1256.0], [70.3, 1256.0], [70.4, 1256.0], [70.5, 1256.0], [70.6, 1256.0], [70.7, 1257.0], [70.8, 1257.0], [70.9, 1257.0], [71.0, 1257.0], [71.1, 1257.0], [71.2, 1258.0], [71.3, 1258.0], [71.4, 1258.0], [71.5, 1258.0], [71.6, 1258.0], [71.7, 1258.0], [71.8, 1258.0], [71.9, 1259.0], [72.0, 1259.0], [72.1, 1259.0], [72.2, 1259.0], [72.3, 1259.0], [72.4, 1260.0], [72.5, 1260.0], [72.6, 1260.0], [72.7, 1260.0], [72.8, 1260.0], [72.9, 1260.0], [73.0, 1260.0], [73.1, 1261.0], [73.2, 1261.0], [73.3, 1261.0], [73.4, 1262.0], [73.5, 1262.0], [73.6, 1262.0], [73.7, 1262.0], [73.8, 1262.0], [73.9, 1263.0], [74.0, 1263.0], [74.1, 1263.0], [74.2, 1263.0], [74.3, 1263.0], [74.4, 1264.0], [74.5, 1265.0], [74.6, 1265.0], [74.7, 1265.0], [74.8, 1266.0], [74.9, 1266.0], [75.0, 1266.0], [75.1, 1267.0], [75.2, 1267.0], [75.3, 1267.0], [75.4, 1267.0], [75.5, 1268.0], [75.6, 1268.0], [75.7, 1268.0], [75.8, 1268.0], [75.9, 1268.0], [76.0, 1268.0], [76.1, 1268.0], [76.2, 1269.0], [76.3, 1269.0], [76.4, 1269.0], [76.5, 1271.0], [76.6, 1271.0], [76.7, 1271.0], [76.8, 1271.0], [76.9, 1271.0], [77.0, 1272.0], [77.1, 1272.0], [77.2, 1272.0], [77.3, 1272.0], [77.4, 1273.0], [77.5, 1273.0], [77.6, 1273.0], [77.7, 1274.0], [77.8, 1274.0], [77.9, 1274.0], [78.0, 1274.0], [78.1, 1274.0], [78.2, 1274.0], [78.3, 1275.0], [78.4, 1275.0], [78.5, 1275.0], [78.6, 1275.0], [78.7, 1275.0], [78.8, 1275.0], [78.9, 1276.0], [79.0, 1276.0], [79.1, 1276.0], [79.2, 1276.0], [79.3, 1276.0], [79.4, 1276.0], [79.5, 1277.0], [79.6, 1277.0], [79.7, 1277.0], [79.8, 1278.0], [79.9, 1278.0], [80.0, 1278.0], [80.1, 1279.0], [80.2, 1279.0], [80.3, 1280.0], [80.4, 1280.0], [80.5, 1281.0], [80.6, 1282.0], [80.7, 1283.0], [80.8, 1283.0], [80.9, 1283.0], [81.0, 1283.0], [81.1, 1284.0], [81.2, 1284.0], [81.3, 1284.0], [81.4, 1285.0], [81.5, 1285.0], [81.6, 1285.0], [81.7, 1285.0], [81.8, 1286.0], [81.9, 1286.0], [82.0, 1286.0], [82.1, 1286.0], [82.2, 1286.0], [82.3, 1286.0], [82.4, 1286.0], [82.5, 1286.0], [82.6, 1286.0], [82.7, 1287.0], [82.8, 1287.0], [82.9, 1288.0], [83.0, 1288.0], [83.1, 1288.0], [83.2, 1288.0], [83.3, 1288.0], [83.4, 1288.0], [83.5, 1289.0], [83.6, 1290.0], [83.7, 1290.0], [83.8, 1291.0], [83.9, 1291.0], [84.0, 1291.0], [84.1, 1291.0], [84.2, 1292.0], [84.3, 1292.0], [84.4, 1292.0], [84.5, 1292.0], [84.6, 1293.0], [84.7, 1293.0], [84.8, 1294.0], [84.9, 1295.0], [85.0, 1298.0], [85.1, 1298.0], [85.2, 1298.0], [85.3, 1298.0], [85.4, 1298.0], [85.5, 1299.0], [85.6, 1299.0], [85.7, 1299.0], [85.8, 1299.0], [85.9, 1299.0], [86.0, 1300.0], [86.1, 1300.0], [86.2, 1300.0], [86.3, 1303.0], [86.4, 1303.0], [86.5, 1303.0], [86.6, 1303.0], [86.7, 1303.0], [86.8, 1303.0], [86.9, 1304.0], [87.0, 1304.0], [87.1, 1304.0], [87.2, 1305.0], [87.3, 1306.0], [87.4, 1308.0], [87.5, 1308.0], [87.6, 1309.0], [87.7, 1309.0], [87.8, 1309.0], [87.9, 1310.0], [88.0, 1311.0], [88.1, 1311.0], [88.2, 1311.0], [88.3, 1312.0], [88.4, 1312.0], [88.5, 1313.0], [88.6, 1314.0], [88.7, 1314.0], [88.8, 1314.0], [88.9, 1315.0], [89.0, 1315.0], [89.1, 1315.0], [89.2, 1316.0], [89.3, 1317.0], [89.4, 1317.0], [89.5, 1317.0], [89.6, 1318.0], [89.7, 1318.0], [89.8, 1319.0], [89.9, 1321.0], [90.0, 1321.0], [90.1, 1322.0], [90.2, 1322.0], [90.3, 1322.0], [90.4, 1322.0], [90.5, 1323.0], [90.6, 1323.0], [90.7, 1327.0], [90.8, 1327.0], [90.9, 1328.0], [91.0, 1328.0], [91.1, 1328.0], [91.2, 1331.0], [91.3, 1332.0], [91.4, 1333.0], [91.5, 1334.0], [91.6, 1335.0], [91.7, 1335.0], [91.8, 1336.0], [91.9, 1337.0], [92.0, 1341.0], [92.1, 1341.0], [92.2, 1344.0], [92.3, 1345.0], [92.4, 1345.0], [92.5, 1345.0], [92.6, 1347.0], [92.7, 1349.0], [92.8, 1350.0], [92.9, 1353.0], [93.0, 1358.0], [93.1, 1359.0], [93.2, 1359.0], [93.3, 1363.0], [93.4, 1364.0], [93.5, 1368.0], [93.6, 1369.0], [93.7, 1370.0], [93.8, 1374.0], [93.9, 1375.0], [94.0, 1375.0], [94.1, 1377.0], [94.2, 1377.0], [94.3, 1379.0], [94.4, 1380.0], [94.5, 1381.0], [94.6, 1381.0], [94.7, 1382.0], [94.8, 1389.0], [94.9, 1389.0], [95.0, 1389.0], [95.1, 1393.0], [95.2, 1393.0], [95.3, 1393.0], [95.4, 1396.0], [95.5, 1397.0], [95.6, 1397.0], [95.7, 1400.0], [95.8, 1403.0], [95.9, 1405.0], [96.0, 1405.0], [96.1, 1406.0], [96.2, 1409.0], [96.3, 1411.0], [96.4, 1422.0], [96.5, 1425.0], [96.6, 1429.0], [96.7, 1432.0], [96.8, 1435.0], [96.9, 1436.0], [97.0, 1437.0], [97.1, 1450.0], [97.2, 1454.0], [97.3, 1462.0], [97.4, 1464.0], [97.5, 1464.0], [97.6, 1468.0], [97.7, 1472.0], [97.8, 1475.0], [97.9, 1481.0], [98.0, 1490.0], [98.1, 1491.0], [98.2, 1492.0], [98.3, 1494.0], [98.4, 1518.0], [98.5, 1526.0], [98.6, 1533.0], [98.7, 1587.0], [98.8, 1601.0], [98.9, 1662.0], [99.0, 1663.0], [99.1, 1688.0], [99.2, 1701.0], [99.3, 1701.0], [99.4, 1875.0], [99.5, 2111.0], [99.6, 2273.0], [99.7, 2344.0], [99.8, 2381.0], [99.9, 2658.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 955.0, "series": [{"data": [[2500.0, 9.0], [1500.0, 56.0], [2000.0, 29.0], [1000.0, 898.0], [500.0, 8.0]], "isOverall": false, "label": "Submit Idea", "isController": false}, {"data": [[4500.0, 1.0], [2500.0, 402.0], [3000.0, 36.0], [1500.0, 1.0], [3500.0, 29.0], [4000.0, 2.0], [2000.0, 529.0]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[2500.0, 1.0], [1500.0, 11.0], [2000.0, 4.0], [1000.0, 955.0], [500.0, 29.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 500, "maxX": 4500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 109.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1891.0, "series": [{"data": [[1.0, 1891.0]], "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 109.0]], "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                },
                colors: ["#9ACD32", "yellow", "orange", "#FF6347"]                
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.0394366197183125, "minX": 1.49933256E12, "maxY": 8.385714285714286, "series": [{"data": [[1.49933286E12, 7.180790960451976], [1.49933268E12, 7.0394366197183125], [1.49933298E12, 7.467605633802813], [1.4993328E12, 7.859154929577466], [1.49933262E12, 7.142857142857143], [1.4993331E12, 7.931818181818178], [1.49933292E12, 7.253521126760562], [1.49933274E12, 7.053521126760567], [1.49933304E12, 7.5421348314606735], [1.49933256E12, 8.385714285714286]], "isOverall": false, "label": "Authenticated Browsing", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.4993331E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1031.0, "minX": 1.0, "maxY": 4272.0, "series": [{"data": [[8.0, 1355.8783382789318], [4.0, 1412.0], [2.0, 1125.0], [1.0, 1031.0], [9.0, 1928.1470588235295], [10.0, 2350.2173913043475], [5.0, 1676.0], [11.0, 2717.0], [12.0, 2291.0], [6.0, 1332.3333333333333], [3.0, 1094.0], [7.0, 1218.8619528619524]], "isOverall": false, "label": "Submit Idea", "isController": false}, {"data": [[7.468000000000007, 1321.3239999999996]], "isOverall": false, "label": "Submit Idea-Aggregated", "isController": false}, {"data": [[8.0, 2626.035608308604], [4.0, 2712.0], [2.0, 2475.0], [1.0, 2318.0], [9.0, 3271.4705882352937], [10.0, 3698.0869565217395], [5.0, 2987.0], [11.0, 4272.0], [12.0, 3992.0], [6.0, 2412.3333333333335], [3.0, 2464.0], [7.0, 2396.6397306397316]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[7.468000000000007, 2541.865000000004]], "isOverall": false, "label": "Transaction Controller-Aggregated", "isController": true}, {"data": [[8.0, 1193.6923076923076], [9.0, 1281.0312499999998], [10.0, 1563.4545454545455], [5.0, 1287.0], [11.0, 2381.0], [6.0, 1190.711111111111], [7.0, 1216.6910866910875]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[7.145000000000007, 1220.5369999999996]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 12.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 367.0, "minX": 1.49933256E12, "maxY": 142688.78333333333, "series": [{"data": [[1.49933286E12, 141472.7], [1.49933268E12, 141472.7], [1.49933298E12, 142655.23333333334], [1.4993328E12, 141489.28333333333], [1.49933262E12, 142688.78333333333], [1.4993331E12, 32437.65], [1.49933292E12, 141472.46666666667], [1.49933274E12, 142655.08333333334], [1.49933304E12, 142671.38333333333], [1.49933256E12, 29906.733333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.49933286E12, 2065.0], [1.49933268E12, 2065.0], [1.49933298E12, 2065.0], [1.4993328E12, 2082.5], [1.49933262E12, 2098.7], [1.4993331E12, 542.5166666666667], [1.49933292E12, 2065.0], [1.49933274E12, 2065.0], [1.49933304E12, 2082.5], [1.49933256E12, 367.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.4993331E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1176.9915254237285, "minX": 1.49933256E12, "maxY": 3157.766666666666, "series": [{"data": [[1.49933286E12, 1258.194915254237], [1.49933268E12, 1200.9830508474577], [1.49933298E12, 1332.2881355932202], [1.4993328E12, 1552.2184873949577], [1.49933262E12, 1186.6583333333326], [1.4993331E12, 1814.0645161290322], [1.49933292E12, 1300.7796610169494], [1.49933274E12, 1203.1610169491519], [1.49933304E12, 1350.0672268907567], [1.49933256E12, 1640.9047619047617]], "isOverall": false, "label": "Submit Idea", "isController": false}, {"data": [[1.49933286E12, 2457.872881355932], [1.49933268E12, 2377.277310924369], [1.49933298E12, 2556.50847457627], [1.4993328E12, 2769.974576271186], [1.49933262E12, 2437.3389830508463], [1.4993331E12, 3157.766666666666], [1.49933292E12, 2499.7899159663857], [1.49933274E12, 2392.364406779661], [1.49933304E12, 2590.0593220338997], [1.49933256E12, 3028.125]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.49933286E12, 1202.8474576271176], [1.49933268E12, 1176.9915254237285], [1.49933298E12, 1223.0756302521008], [1.4993328E12, 1211.737288135593], [1.49933262E12, 1249.3193277310922], [1.4993331E12, 1340.666666666667], [1.49933292E12, 1196.923728813559], [1.49933274E12, 1190.680672268908], [1.49933304E12, 1239.0252100840337], [1.49933256E12, 1437.84]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.4993331E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 288.65254237288127, "minX": 1.49933256E12, "maxY": 2153.9, "series": [{"data": [[1.49933286E12, 1258.1186440677968], [1.49933268E12, 1200.864406779661], [1.49933298E12, 1332.0423728813562], [1.4993328E12, 1552.2016806722688], [1.49933262E12, 1186.5249999999992], [1.4993331E12, 1813.9677419354841], [1.49933292E12, 1300.6440677966107], [1.49933274E12, 1203.0932203389827], [1.49933304E12, 1350.0], [1.49933256E12, 1640.8095238095234]], "isOverall": false, "label": "Submit Idea", "isController": false}, {"data": [[1.49933286E12, 1550.1271186440679], [1.49933268E12, 1487.4621848739496], [1.49933298E12, 1628.0677966101694], [1.4993328E12, 1857.1355932203394], [1.49933262E12, 1491.6779661016951], [1.4993331E12, 2153.9], [1.49933292E12, 1595.3529411764703], [1.49933274E12, 1493.1271186440674], [1.49933304E12, 1653.2288135593212], [1.49933256E12, 2096.041666666666]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.49933286E12, 294.15254237288144], [1.49933268E12, 288.65254237288127], [1.49933298E12, 295.10084033613435], [1.4993328E12, 299.5847457627119], [1.49933262E12, 303.85714285714266], [1.4993331E12, 329.7407407407407], [1.49933292E12, 292.5254237288137], [1.49933274E12, 290.7226890756304], [1.49933304E12, 302.3025210084034], [1.49933256E12, 505.11999999999995]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.4993331E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.49933256E12, "maxY": 194.9047619047619, "series": [{"data": [[1.49933286E12, 189.98305084745752], [1.49933268E12, 191.6186440677966], [1.49933298E12, 190.87288135593215], [1.4993328E12, 189.37815126050407], [1.49933262E12, 189.3], [1.4993331E12, 187.6451612903226], [1.49933292E12, 190.10169491525426], [1.49933274E12, 190.2542372881356], [1.49933304E12, 189.46218487394958], [1.49933256E12, 194.9047619047619]], "isOverall": false, "label": "Submit Idea", "isController": false}, {"data": [[1.49933286E12, 190.1864406779661], [1.49933268E12, 191.15126050420162], [1.49933298E12, 190.76271186440678], [1.4993328E12, 189.2457627118644], [1.49933262E12, 189.96610169491527], [1.4993331E12, 187.43333333333337], [1.49933292E12, 189.9747899159664], [1.49933274E12, 190.23728813559316], [1.49933304E12, 189.52542372881348], [1.49933256E12, 193.91666666666666]], "isOverall": false, "label": "Transaction Controller", "isController": true}, {"data": [[1.49933286E12, 0.0], [1.49933268E12, 0.0], [1.49933298E12, 0.0], [1.4993328E12, 0.0], [1.49933262E12, 0.0], [1.4993331E12, 0.0], [1.49933292E12, 0.0], [1.49933274E12, 0.0], [1.49933304E12, 0.0], [1.49933256E12, 0.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.4993331E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 889.0, "minX": 1.49933256E12, "maxY": 2807.0, "series": [{"data": [[1.49933286E12, 1503.0], [1.49933268E12, 1450.0], [1.49933298E12, 1573.0], [1.4993328E12, 2560.0], [1.49933262E12, 2344.0], [1.4993331E12, 2606.0], [1.49933292E12, 1658.0], [1.49933274E12, 1504.0], [1.49933304E12, 1713.0], [1.49933256E12, 2807.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.49933286E12, 920.0], [1.49933268E12, 914.0], [1.49933298E12, 996.0], [1.4993328E12, 928.0], [1.49933262E12, 946.0], [1.4993331E12, 1031.0], [1.49933292E12, 927.0], [1.49933274E12, 927.0], [1.49933304E12, 975.0], [1.49933256E12, 889.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.49933286E12, 1377.0], [1.49933268E12, 1321.0], [1.49933298E12, 1380.5], [1.4993328E12, 1384.4], [1.49933262E12, 1390.2], [1.4993331E12, 1396.0], [1.49933292E12, 1374.2], [1.49933274E12, 1316.1], [1.49933304E12, 1383.4], [1.49933256E12, 2661.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.49933286E12, 2448.36], [1.49933268E12, 2634.679999999997], [1.49933298E12, 2391.4500000000007], [1.4993328E12, 2473.9199999999983], [1.49933262E12, 2753.2999999999993], [1.4993331E12, 2401.9], [1.49933292E12, 2437.96], [1.49933274E12, 2359.1699999999987], [1.49933304E12, 2357.5599999999995], [1.49933256E12, 2807.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.49933286E12, 1528.199999999999], [1.49933268E12, 1408.1], [1.49933298E12, 1472.0], [1.4993328E12, 1658.9999999999995], [1.49933262E12, 1667.8999999999999], [1.4993331E12, 1517.8999999999996], [1.49933292E12, 1491.6], [1.49933274E12, 1382.1], [1.49933304E12, 1472.85], [1.49933256E12, 2776.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.4993331E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1238.0, "minX": 0.0, "maxY": 1366.0, "series": [{"data": [[0.0, 1366.0], [3.0, 1238.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 3.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 852.5, "minX": 0.0, "maxY": 1100.0, "series": [{"data": [[0.0, 1100.0], [3.0, 852.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 3.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency (ms)",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.49933256E12, "maxY": 3.95, "series": [{"data": [[1.49933286E12, 3.95], [1.49933268E12, 3.95], [1.49933298E12, 3.95], [1.4993328E12, 3.95], [1.49933262E12, 3.95], [1.4993331E12, 0.9], [1.49933292E12, 3.933333333333333], [1.49933274E12, 3.95], [1.49933304E12, 3.95], [1.49933256E12, 0.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.4993331E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7666666666666667, "minX": 1.49933256E12, "maxY": 3.9833333333333334, "series": [{"data": [[1.49933286E12, 3.933333333333333], [1.49933268E12, 3.933333333333333], [1.49933298E12, 3.95], [1.4993328E12, 3.95], [1.49933262E12, 3.9833333333333334], [1.4993331E12, 0.9666666666666667], [1.49933292E12, 3.933333333333333], [1.49933274E12, 3.95], [1.49933304E12, 3.966666666666667], [1.49933256E12, 0.7666666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.4993331E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses/sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.49933256E12, "maxY": 2.0, "series": [{"data": [[1.49933286E12, 1.9666666666666666], [1.49933268E12, 1.9833333333333334], [1.49933298E12, 1.9666666666666666], [1.4993328E12, 1.9666666666666666], [1.49933262E12, 1.9666666666666666], [1.4993331E12, 0.5], [1.49933292E12, 1.9833333333333334], [1.49933274E12, 1.9666666666666666], [1.49933304E12, 1.9666666666666666], [1.49933256E12, 0.4]], "isOverall": false, "label": "Transaction Controller-success", "isController": true}, {"data": [[1.49933286E12, 1.9666666666666666], [1.49933268E12, 1.9666666666666666], [1.49933298E12, 1.9833333333333334], [1.4993328E12, 1.9666666666666666], [1.49933262E12, 1.9833333333333334], [1.4993331E12, 0.45], [1.49933292E12, 1.9666666666666666], [1.49933274E12, 1.9833333333333334], [1.49933304E12, 1.9833333333333334], [1.49933256E12, 0.4166666666666667]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.49933286E12, 1.9666666666666666], [1.49933268E12, 1.9666666666666666], [1.49933298E12, 1.9666666666666666], [1.4993328E12, 1.9833333333333334], [1.49933262E12, 2.0], [1.4993331E12, 0.5166666666666667], [1.49933292E12, 1.9666666666666666], [1.49933274E12, 1.9666666666666666], [1.49933304E12, 1.9833333333333334], [1.49933256E12, 0.35]], "isOverall": false, "label": "Submit Idea-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.4993331E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: "%H:%M:%S",
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

// Collapse
$(function() {
        $('.collapse').on('shown.bs.collapse', function(){
            collapse(this, false);
        }).on('hidden.bs.collapse', function(){
            collapse(this, true);
        });
});

$(function() {
    $(".glyphicon").mousedown( function(event){
        var tmp = $('.in:not(ul)');
        tmp.parent().parent().parent().find(".fa-chevron-up").removeClass("fa-chevron-down").addClass("fa-chevron-down");
        tmp.removeClass("in");
        tmp.addClass("out");
    });
});

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

// Unchecks all boxes for "Hide all samples" functionality
function uncheckAll(id){
    toggleAll(id, false);
}

// Checks all boxes for "Show all samples" functionality
function checkAll(id){
    toggleAll(id, true);
}

// Prepares data to be consumed by plot plugins
function prepareData(series, choiceContainer, customizeSeries){
    var datasets = [];

    // Add only selected series to the data set
    choiceContainer.find("input:checked").each(function (index, item) {
        var key = $(item).attr("name");
        var i = 0;
        var size = series.length;
        while(i < size && series[i].label != key)
            i++;
        if(i < size){
            var currentSeries = series[i];
            datasets.push(currentSeries);
            if(customizeSeries)
                customizeSeries(currentSeries);
        }
    });
    return datasets;
}

/*
 * Ignore case comparator
 */
function sortAlphaCaseless(a,b){
    return a.toLowerCase() > b.toLowerCase() ? 1 : -1;
};

/*
 * Creates a legend in the specified element with graph information
 */
function createLegend(choiceContainer, infos) {
    // Sort series by name
    var keys = [];
    $.each(infos.data.result.series, function(index, series){
        keys.push(series.label);
    });
    keys.sort(sortAlphaCaseless);

    // Create list of series with support of activation/deactivation
    $.each(keys, function(index, key) {
        var id = choiceContainer.attr('id') + index;
        $('<li />')
            .append($('<input id="' + id + '" name="' + key + '" type="checkbox" checked="checked" hidden />'))
            .append($('<label />', { 'text': key , 'for': id }))
            .appendTo(choiceContainer);
    });
    choiceContainer.find("label").click( function(){
        if (this.style.color !== "rgb(129, 129, 129)" ){
            this.style.color="#818181";
        }else {
            this.style.color="black";
        }
        $(this).parent().children().children().toggleClass("legend-disabled");
    });
    choiceContainer.find("label").mousedown( function(event){
        event.preventDefault();
    });
    choiceContainer.find("label").mouseenter(function(){
        this.style.cursor="pointer";
    });

    // Recreate graphe on series activation toggle
    choiceContainer.find("input").click(function(){
        infos.createGraph();
    });
}
